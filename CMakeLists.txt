#
# Created by HFauto on 2022/12/27
# Copyright (c) 2023 HFauto. All rights reserved.
#
cmake_minimum_required(VERSION 3.12...3.25)
project(zx_media_service LANGUAGES CXX)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 14)
message(STATUS "System Information: ${CMAKE_SYSTEM} ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR}")
# 加载cmake模块
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/find")
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/func/myList.cmake)
include(FetchContent)
include(CTest)
# 关闭警告
add_definitions(-O3)
add_definitions(-w)
add_definitions(-fPIC)
# 使能模块
option(ENABLE_CATCH "Enable catch" ON)
option(ENABLE_SPDLOG "Enable spdlog" ON)
option(ENABLE_JEMALLOC "Enable jemalloc" OFF)
option(ENABLE_JEMALLOC_STATIC "Enable jemalloc static" OFF)
option(ENABLE_OPENSSL "Enable openssl" ON)
option(ENABLE_OPENSSL_STATIC "Enable openssl static" ON)
option(ENABLE_LIBYUV "Enable libyuv" ON)
option(ENABLE_X264 "Enable x264" ON)
option(ENABLE_X264_STATIC "Enable x264 static" ON)
option(ENABLE_X265 "Enable x265" ON)
option(ENABLE_X265_STATIC "Enable x265 static" ON)
option(ENABLE_LIBYUV_STATIC "Enable libyuv static" ON)
option(ENABLE_FFMPEG "Enable ffmpeg" ON)
option(ENABLE_FFMPEG_STATIC "Enable ffmpeg static" ON)
option(ENABLE_OPENCV "Enable opencv" ON)
option(ENABLE_OPENCV_STATIC "Enable opencv static" ON)
option(ENABLE_WORKFLOW "Enable workflow" ON)
option(ENABLE_WORKFLOW_STATIC "Enable workflow static" ON)
option(ENABLE_WORKFLOW_KAFKA "Enable workflow kafka" ON)
option(ENABLE_WORKFLOW_KAFKA_STATIC "Enable workflow kafka static" ON)
option(ENABLE_BUILD_TEST "Enable build test" ON)
option(ENABLE_MEDIA_SERVICE_STATIC "Enable zx media service static" ON)
# 仅支持linux
if(NOT CMAKE_SYSTEM_NAME MATCHES "Linux")
    message(FATAL_ERROR "Not supported ${CMAKE_SYSTEM_NAME}")
endif()
message(STATUS "ENABLE_CATCH                    ${ENABLE_CATCH}")
message(STATUS "ENABLE_SPDLOG                   ${ENABLE_SPDLOG}")
message(STATUS "ENABLE_JEMALLOC                 ${ENABLE_JEMALLOC}")
message(STATUS "ENABLE_JEMALLOC_STATIC          ${ENABLE_JEMALLOC_STATIC}")
message(STATUS "ENABLE_OPENSSL                  ${ENABLE_OPENSSL}")
message(STATUS "ENABLE_OPENSSL_STATIC           ${ENABLE_OPENSSL_STATIC}")
message(STATUS "ENABLE_LIBYUV                   ${ENABLE_LIBYUV}")
message(STATUS "ENABLE_LIBYUV_STATIC            ${ENABLE_LIBYUV_STATIC}")
message(STATUS "ENABLE_X264                     ${ENABLE_X264}")
message(STATUS "ENABLE_X264_STATIC              ${ENABLE_X264_STATIC}")
message(STATUS "ENABLE_X265                     ${ENABLE_X265}")
message(STATUS "ENABLE_X265_STATIC              ${ENABLE_X265_STATIC}")
message(STATUS "ENABLE_FFMPEG                   ${ENABLE_FFMPEG}")
message(STATUS "ENABLE_FFMPEG_STATIC            ${ENABLE_FFMPEG_STATIC}")
message(STATUS "ENABLE_OPENCV                   ${ENABLE_OPENCV}")
message(STATUS "ENABLE_OPENCV_STATIC            ${ENABLE_OPENCV_STATIC}")
message(STATUS "ENABLE_WORKFLOW                 ${ENABLE_WORKFLOW}")
message(STATUS "ENABLE_WORKFLOW_STATIC          ${ENABLE_WORKFLOW_STATIC}")
message(STATUS "ENABLE_WORKFLOW_KAFKA           ${ENABLE_WORKFLOW_KAFKA}")
message(STATUS "ENABLE_WORKFLOW_KAFKA_STATIC    ${ENABLE_WORKFLOW_KAFKA_STATIC}")
message(STATUS "ENABLE_BUILD_TEST               ${ENABLE_BUILD_TEST}")
message(STATUS "ENABLE_MEDIA_SERVICE_STATIC     ${ENABLE_MEDIA_SERVICE_STATIC}")

if (ENABLE_CATCH)
    add_definitions(-DENABLE_CATCH)
endif ()
if (ENABLE_JEMALLOC)
    add_definitions(-DENABLE_JEMALLOC)
endif ()
if (ENABLE_OPENSSL)
    add_definitions(-DENABLE_OPENSSL)
endif ()
if (ENABLE_LIBYUV)
    add_definitions(-DENABLE_LIBYUV)
endif ()
if (ENABLE_X264)
    add_definitions(-DENABLE_X264)
endif ()
if (ENABLE_X265)
    add_definitions(-DENABLE_X265)
endif ()
if (ENABLE_FFMPEG)
    add_definitions(-DENABLE_FFMPEG)
endif ()
if (ENABLE_OPENCV)
    add_definitions(-DENABLE_OPENCV)
endif ()
if (ENABLE_WORKFLOW)
    add_definitions(-DENABLE_WORKFLOW)
endif ()
if (ENABLE_WORKFLOW_KAFKA)
    add_definitions(-DENABLE_WORKFLOW_KAFKA)
endif ()
if (ENABLE_MEDIA_SERVICE_STATIC)
    add_definitions(-DENABLE_MEDIA_SERVICE_STATIC)
endif ()

# 清空全局变量
clean_cached_list(MK_COMPILE_DEFINITIONS)
clean_cached_list(ZX_LINK_LIBRARIES)

# 使用PkgConfig查找库
find_package(PkgConfig QUIET)

# 设置输出路径
set(BUILD_CPU_NUM           1)
set(LIBRARY_OUTPUT_PATH     ${CMAKE_CURRENT_SOURCE_DIR}/lib)
set(EXECUTABLE_OUTPUT_PATH  ${CMAKE_CURRENT_SOURCE_DIR}/app)
set(CMAKE_INSTALL_PREFIX    ${CMAKE_CURRENT_SOURCE_DIR}/extern/usr)
set(EXTERN_INSTALL_DIR      ${CMAKE_CURRENT_SOURCE_DIR}/extern/usr)
set(CMAKE_PREFIX_PATH       ${CMAKE_CURRENT_SOURCE_DIR}/extern/usr)
set(PROJECT_INSTALL_ROOTDIR ${CMAKE_CURRENT_SOURCE_DIR}/release/${CMAKE_SYSTEM_NAME}_${CMAKE_SYSTEM_PROCESSOR})
set(PROJECT_INSTALL_LIBDIR  ${PROJECT_INSTALL_ROOTDIR}/lib)
set(PROJECT_INSTALL_APPDIR  ${PROJECT_INSTALL_ROOTDIR}/app)
set(PROJECT_INSTALL_INCDIR  ${PROJECT_INSTALL_ROOTDIR}/include)
set(ENV{PKG_CONFIG_PATH} "${EXTERN_INSTALL_DIR}/lib/pkgconfig")
message(STATUS PKG_CONFIG_PATH=$ENV{PKG_CONFIG_PATH})

include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/enable/enableCatch.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/enable/enableSpdlog.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/enable/enableJemalloc.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/enable/enableOpenssl.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/enable/enableLibyuv.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/enable/enableX265.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/enable/enableX264.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/enable/enableFFmpeg.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/enable/enableOpencv.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/enable/enableWorkflow.cmake)

add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/bash)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/test)
message(STATUS "Build files have been install to:  ${PROJECT_INSTALL_ROOTDIR}")